{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5b441cf.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Titles extends React.Component{\n    render() {\n        return (\n        <div>\n            <h1>Weather Finder</h1>\n            <p>Find out temperature, conditions, and more</p>\n        </div>\n\n        )\n\n    }\n}\n\nexport default Titles;","import React from \"react\";\n\nclass Form extends React.Component {\n    render() {//this.props.getWeather = accessing the getWeather \"prop\" in App.js\n        return (\n            <div>\n             <form onSubmit={this.props.getWeather}> \n            <input type=\"text\" name=\"city\" placeholder=\"City\" />\n            <input type=\"text\" name=\"country\" placeholder=\"Country\" />\n            <button>Get Weather</button>\n             </form>\n            </div>\n        )\n    }\n}\n\nexport default Form; ","import React from \"react\";\n\nclass Weather extends React.Component {\n    render() {\n        return (\n            <div>\n             \n\n\n            { this.props.city && this.props.country && <p>Location: { this.props.city }, { this.props.country } </p> }\n            { this.props.temperature && <p> Temperature: { this.props.temperature }</p> }\n            { this.props.humidity && <p> Humidity: { this.props.humidity }</p> }\n            { this.props.description && <p> Description: { this.props.description }</p> }\n            { this.props.error && <p> { this.props.error}</p> }\n            </div>\n        )//syntax saying \"if this.props.description, (&& anything else), then also render out (&&) whatever in the p tags\"\n    }\n}\n\nexport default Weather; ","// import React, { Component } from 'react';\n    // import logo from './logo.svg';\n    // import './App.css';\n\n    // class App extends Component {\n    //   render() {\n    //     return (\n    //       <div className=\"App\">\n    //         <header className=\"App-header\">\n    //           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //           <p>\n    //             Edit <code>src/App.js</code> and save to reload.\n    //           </p>\n    //           <a\n    //             className=\"App-link\"\n    //             href=\"https://reactjs.org\"\n    //             target=\"_blank\"\n    //             rel=\"noopener noreferrer\"\n    //           >\n    //             Learn React\n    //           </a>\n    //         </header>\n    //       </div>\n    //     );\n    //   }\n    // }\n\n    // export default App;\n\nimport React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"a955d5c049578fea06704ebf1541a2cb\";\n\nclass App extends React.Component {\n    state = {\n        temperature: undefined, //define initial state\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: undefined\n    }\n    getWeather = async (e) => { //this creates a new method - no need to declare new constructor\n        e.preventDefault(); //prevent default component behavior - page doesn't refresh\n        const city = e.target.elements.city.value; //targets the name of the Form.js elements - stores it in a variable to be used to change the URL dynamically\n        const country = e.target.elements.country.value;\n\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`); //have to use back ticks with template literals - replace \n        const data = await api_call.json();\n        console.log(data);\n\n        if(city && country){ //use a control statement to only setState() if city and country have inputs, aka === true; otherwise it triggers an \"undefined\" error\n            this.setState({\n                temperature: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                humidity: data.main.humidity,\n                description: data.weather[0].description, //damn I did that right\n                error: \"\"\n            });\n        } else {\n            this.setState({ //if getting false data then don't need to access all these values - instead trigger error\n                temperature: undefined,\n                city: undefined,\n                country:  undefined,\n                humidity: undefined,\n                description: undefined, \n                error: \"Please enter the value.\"\n            });\n        }\n    }\n    render() {\n        return ( \n            <div>\n                <Titles />\n                <Form getWeather={this.getWeather} />\n\n                <Weather \n                temperature={this.state.temperature}\n                city={this.state.city}\n                country={this.state.country}\n                humidity={this.state.humidity}\n                description={this.state.description}\n                error={this.state.error} \n                /> \n            </div>\n        )\n    }//use render method to define data that goes into the component   \n    //RENDER RETURNS JSX    \n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}